var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TwiliteTimeline","category":"page"},{"location":"#TwiliteTimeline","page":"Home","title":"TwiliteTimeline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TwiliteTimeline is a twitter API client, which is capable of querying the Twitter statuses/user_timeline endpoint. The current version of the package only valid for Twitter API version 1.1","category":"page"},{"location":"#Use-Case-and-Example:","page":"Home","title":"Use Case & Example:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current version of the App has limited feature which will be improved in future updates. Each new feature will be introduced with elaborate examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To be able to use the package first user need their OAuth tokens and secrets which can be created after log in to twitter developer account by creating a new app. Then using the Authentictor and ResourceParams type provided by the package they need to define values of that type and finally use the collect_tweets methods to query the API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Authentictor is a julia concrete type to store the Consumer Key, Consumer Secret, OAuth Token and OAuth Token from twitter API. It is recommended that user save them into environment and load them by using ENV keyword.\nThe ResourceParams concrete type is to store the Parameters needed to query the API and based on the API document version 1.1. The default values in the package are sometime different than the API document. By default the trim_user is set to false, when providing any valid count parameter the include_rts will be set to true silently.","category":"page"},{"location":"#Use-Case:-Get-latest-100-tweets-from-a-Profile","page":"Home","title":"Use Case: Get latest 100 tweets from a Profile","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the following example the all credentials is saved as environment variable and later loaded from ENV dictionary.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Create value of type Authentictor\ncreds = Authentictor(ENV[\"CKEY\"], ENV[\"CSEC\"], ENV[\"OTOK\"], ENV[\"OSEC\"])\n# Create Value of Type ResourceParams\nrps = ResourceParams(\"Viral_B_Shah\", count=100)\n\n# Call The Twitter API\ntweets = collect_tweets(creds, rps)","category":"page"},{"location":"#Use-Case:-Get-latest-5-tweets-with-Excluding-Replies-and-Trim-User-Data","page":"Home","title":"Use Case: Get latest 5 tweets with Excluding Replies and Trim User Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The field trim_user and exclude_replies decides that if we want to exclude user data and  exclude replies when fetching the data or not.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Create value of type Authentictor\ncreds = Authentictor(ENV[\"CKEY\"], ENV[\"CSEC\"], ENV[\"OTOK\"], ENV[\"OSEC\"])\n\n# Create Value of Type ResourceParams\nrps = ResourceParams(\"tomkwong\", count=5, trim_user=true, exclude_replies=true)\n\n# Call The Twitter API\ntweets = collect_tweets(creds, rps)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The data return as list/array of dictionary, were each dictionary object is a Tweet.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now it is possible to write and read json files having single tweets or array of tweets for better persistency.","category":"page"},{"location":"#User-Case:-Write-to-Json-and-Read-from-Json","page":"Home","title":"User Case: Write to Json and Read from Json","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First run the any of the first or second usecase to load the tweets in to a object called tweets. Assuming we have a temp directory to store the tweets. Then follow the example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Write the tweets\nwrite_to_json(\"./temp/all_tweets.json\", tweets)\n\n# Later read the tweets\nread_from_json(\"./temp/all_tweets.json\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TwiliteTimeline]","category":"page"},{"location":"#TwiliteTimeline.BASE_URL","page":"Home","title":"TwiliteTimeline.BASE_URL","text":"Constant for base url and url suffix.\n\n\n\n\n\n","category":"constant"},{"location":"#TwiliteTimeline.USER_TIMELINE","page":"Home","title":"TwiliteTimeline.USER_TIMELINE","text":"User Timeline Endpoint as constant\n\n\n\n\n\n","category":"constant"},{"location":"#TwiliteTimeline.Authentictor","page":"Home","title":"TwiliteTimeline.Authentictor","text":"Authentictor (Datatype:TwiliteTimeline)\n\nAuthenticator is defined datatype to create an object which will be used to authenticate the user when interacting with the twitter API. Someone must generate the Consumer Key, Consumer Secret, OAuth Token and OAuth Secret using their own twitter developer account then using those credentionas create a value of the type Authenticator.\n\nExample\n\n# Here Twitter OAuth token and secret is stored as environment varialbe whith name\n# CKEY, CSEC, OTOK, OSEC\njulia> creds =  Authentictor(ENV[\"CKEY\"], ENV[\"CSEC\"], ENV[\"OTOK\"], ENV[\"OSEC\"])\n\n\n\n\n\n","category":"type"},{"location":"#TwiliteTimeline.Params","page":"Home","title":"TwiliteTimeline.Params","text":"Params(AbstractType: TwiliteTimeline)\n\nApiParams is a abstruct type for any parameter subtype. So Any subtype of ApiParams should sataify all the requirements of the ApiParams.\n\n\n\n\n\n","category":"type"},{"location":"#TwiliteTimeline.ParamsGetTweets","page":"Home","title":"TwiliteTimeline.ParamsGetTweets","text":"ParamsGetTweets(ConcreteType: TwiliteTimeline)\n\nParamGetTweets is a defined datatype to store the Resource Parameter mentioned in the twitter API document which we have to send when qurying the API in the request body.\n\nTo be able to use twitter API the fild value shoud satisfy the following criteria:\n\nWhen Providing valid count value the include_rts arguments must have to be 1; by default providing any valid count value of the include_rts will be set to 1 silintly\nWhen providing constructor argument value for the boolean field such as trim_user, exclude_replies and include_rts the value mush have to be 1 or 0. By the default the values are set to the default value according to Twitter API doc.\n\nExample\n\njulia> resource_params = ParamsGetTweet(\"realDonaldTrump\", count=100)\nParamsGetTweet(\"realDonaldTrump\", nothing, nothing, 100, nothing, false, true)\n\n\njulia> resource_params = ParamsGetTweet(\"realDonaldTrump\", count=100, exclude_replies=true)\nParamsGetTweet(\"realDonaldTrump\", nothing, nothing, 100, nothing, false, true)\n\n\n\n\n\n","category":"type"},{"location":"#TwiliteTimeline.ParamsPostTweet","page":"Home","title":"TwiliteTimeline.ParamsPostTweet","text":"ParamsPostTweet(ConcreteType: ParamsPostTweet)\n\nParamsPostTweet is a defined datatype to store the Resource Parameter mentioned in the twitter API document which we have to send when qurying the API in the request body.\n\nThe status field is a mandatory field and rest of the field is set according to twitter api doc with default values. There is a lot of condition implied when using optional fields os it is suggested that use should first see the twitter version 1 api doc.\n\nExample\n\njulia> test = ParamsPostTweet(\"asdf asdf asdf.\")\nParamsPostTweet(\"asdf asdf asdf.\", nothing, false, nothing, nothing, nothing, false, nothing, nothing, nothing, nothing, false, false, true, nothing)\n\n\n\n\n\n\n\n","category":"type"},{"location":"#TwiliteTimeline.ResourceParams","page":"Home","title":"TwiliteTimeline.ResourceParams","text":"ResourceParams(DataType:TwiliteTimeline)\n\nResourceParams is a defined datatype to store the Resource Parameter mentioned in the twitter API document which we have to send when qurying the API in the request body.\n\nTo be able to use twitter API the fild value shoud satisfy the following criteria:\n\nWhen Providing valid count value the include_rts arguments must have to be 1; by default providing any valid count value of the include_rts will be set to 1 silintly\nWhen providing constructor argument value for the boolean field such as trim_user, exclude_replies and include_rts the value mush have to be 1 or 0. By the default the values are set to the default value according to Twitter API doc.\n\nExample\n\njulia> resource_params = ResourceParams(\"realDonaldTrump\", count=100)\nResourceParams(\"realDonaldTrump\", nothing, nothing, 100, nothing, false, true)\n\n\njulia> resource_params = ResourceParams(\"realDonaldTrump\", count=100, exclude_replies=true)\nResourceParams(\"realDonaldTrump\", nothing, nothing, 100, nothing, false, true)\n\n\n\n\n\n","category":"type"},{"location":"#TwiliteTimeline.collect_tweets-Tuple{Authentictor,ResourceParams}","page":"Home","title":"TwiliteTimeline.collect_tweets","text":"collect_tweets(a::Authentictor, rp::ResourceParams)\n\nTry to collect tweets based on given object of type Autenticator and ResourceParams. The collect_tweets is a wrapper around the oauth_request_resource method from OAuth package which is responsible for sending the get request to the statuses/user_timeline.\n\nExample\n\n# Here Twitter OAuth token and secret is stored as environment varialbe whith name\n# CKEY, CSEC, OTOK, OSEC\njulia> creds = Authentictor(ENV[\"CKEY\"], ENV[\"CSEC\"], ENV[\"OTOK\"], ENV[\"OSEC\"])\njulia> resource_params = ResourceParams(\"realDonaldTrump\", count=100)\njulia> tweets = collect_tweets(creds, resource_params);\n\nThat should return 100 latest tweets from the profile @realDonaldTrump.\n\n\n\n\n\n","category":"method"},{"location":"#TwiliteTimeline.get_tweets-Tuple{Authentictor,ParamsGetTweets}","page":"Home","title":"TwiliteTimeline.get_tweets","text":"collect_tweets(a::Authentictor, p::ParamsGetTweet)\n\nTry to collect tweets based on given object of type Autenticator and ResourceParams. The collect_tweets is a wrapper around the oauth_request_resource method from OAuth package which is responsible for sending the get request to the statuses/user_timeline.\n\nExample\n\n# Here Twitter OAuth token and secret is stored as environment varialbe whith name\n# CKEY, CSEC, OTOK, OSEC\njulia> creds = Authentictor(ENV[\"CKEY\"], ENV[\"CSEC\"], ENV[\"OTOK\"], ENV[\"OSEC\"])\njulia> params = ParamsGetTweet(\"realDonaldTrump\", count=100)\njulia> tweets = get_tweets(creds, params);\n\nThat should return 100 latest tweets from the profile @realDonaldTrump.\n\n\n\n\n\n","category":"method"},{"location":"#TwiliteTimeline.params_to_dict-Tuple{ResourceParams}","page":"Home","title":"TwiliteTimeline.params_to_dict","text":"params_to_dict(rp::ResourceParams)\n\nIs a internal function to convert the user provided Twitter API parameter into dictionary which oauth_request_resource from OAuth package expect. The method silently add include_rts paramater value to 1 when providing an valid count paramter.\n\n\n\n\n\n","category":"method"},{"location":"#TwiliteTimeline.params_to_dict-Tuple{T} where T<:TwiliteTimeline.Params","page":"Home","title":"TwiliteTimeline.params_to_dict","text":"params_to_dict(rp::ResourceParams)\n\nIs a internal function to convert the user provided Twitter API parameter into dictionary which oauth_request_resource from OAuth package expect. The method silently add include_rts paramater value to 1 when providing an valid count paramter.\n\n\n\n\n\n","category":"method"},{"location":"#TwiliteTimeline.post_tweet-Tuple{Authentictor,ParamsPostTweet}","page":"Home","title":"TwiliteTimeline.post_tweet","text":"post_tweet(a::Authentictor, p::ResourceParams)\n\nTry to collect tweets based on given object of type Autenticator and ResourceParams. The collect_tweets is a wrapper around the oauth_request_resource method from OAuth package which is responsible for sending the get request to the statuses/user_timeline.\n\nExample\n\n# Here Twitter OAuth token and secret is stored as environment varialbe whith name\n# CKEY, CSEC, OTOK, OSEC\njulia> creds = Authentictor(ENV[\"CKEY\"], ENV[\"CSEC\"], ENV[\"OTOK\"], ENV[\"OSEC\"])\njulia> resource_params = ParamsPostTweet(\"asdf asdf asdf Test tweet\")\njulia> tweets = post_tweet(creds, resource_params);\n\nThat should return 100 latest tweets from the profile @realDonaldTrump.\n\n\n\n\n\n","category":"method"},{"location":"#TwiliteTimeline.read_from_json-Tuple{String}","page":"Home","title":"TwiliteTimeline.read_from_json","text":"read_from_json(path::String)\n\nGiven a path of json file the method should be able to read files as Dict type or Array of Dict. The method expect the following parameters:\n\npath: path of the json file to load\n\nExample\n\njulia> read_from_json(\"./temp/all_tweets.json\")\nFile loading successful!\nDict{String,Any} with 1 entry:\n  \"asdf\" => \"asdf\n\n\n\n\n\n","category":"method"},{"location":"#TwiliteTimeline.write_to_json-Tuple{String,Union{Dict, Array}}","page":"Home","title":"TwiliteTimeline.write_to_json","text":"write_to_json(path::String, tw::ArrayOrDict)\n\nGeneral functon to write Dict or Array of Dict as tweet as json for better persistance. The method expect the following parameters:\n\npath: path to save the file with file name (see the example)\ntw: Array of Dict or Dict object to write as json\n\nExample\n\njulia> tweet = Dict(\"asdf\" => \"asdf\")\nDict{String,String} with 1 entry:\n  \"asdf\" => \"asdf\"\n\njulia> tweets = [tweet, tweet]\n2-element Array{Dict{String,String},1}:\n Dict(\"asdf\" => \"asdf\")\n Dict(\"asdf\" => \"asdf\")\n\njulia> write_to_json(\"./temp/all_tweets.json\",tweet)\nFile writting was successful!\n\n\njulia> write_to_json(\"./temp/single_tweet.json\",tweet)\nFile writting was successful!\n\n\n\n\n\n","category":"method"}]
}
